{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","this","props","total","Component","Counter","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Counters","onReset","counters","map","c","key","App","state","handleReset","setState","handleIncrement","i","indexOf","handleDelete","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAWeA,E,uKARX,OAAQ,yBAAKC,UAAU,gCACrB,uBAAGA,UAAU,uBAAuBC,KAAK,KAAzC,SACE,0BAAMD,UAAU,oCAAoCE,KAAKC,MAAMC,a,GAJlDC,aCsBNC,G,6KArBJ,IAAD,OACR,OACC,6BACC,0BAAMN,UAAWE,KAAKK,mBAAoBL,KAAKM,eAC/C,4BAAQC,QAAS,kBAAM,EAAKN,MAAMO,YAAY,EAAKP,MAAMQ,UAAUX,UAAU,4BAA7E,aACA,4BAAQS,QAAS,kBAAM,EAAKN,MAAMS,SAAS,EAAKT,MAAMQ,QAAQE,KAAKb,UAAU,6BAA7E,a,wCAMF,IAAIc,EAAU,mBAEd,OADAA,GAAyC,IAA7BZ,KAAKC,MAAMQ,QAAQI,MAAe,UAAY,Y,oCAI5C,IACNA,EAAUb,KAAKC,MAAMQ,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAnBVV,cCYPW,E,uKAVH,IAAD,EAC8Cd,KAAKC,MAAlDc,EADD,EACCA,QAASL,EADV,EACUA,SAAUF,EADpB,EACoBA,YAAaQ,EADjC,EACiCA,SACxC,OAAO,6BACL,4BAAQT,QAASQ,EAASjB,UAAU,8BAApC,SACCkB,EAASC,KAAI,SAAAC,GAAC,OACb,kBAAC,EAAD,CAASV,YAAaA,EAAaE,SAAUA,EAAUS,IAAKD,EAAEP,GAAIF,QAASS,Y,GAN5Df,aC6CRiB,E,4MAzCbC,MAAQ,CACNL,SAAU,CACR,CAAEL,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAIpBS,YAAc,WACZ,IAAMN,EAAW,EAAKK,MAAML,SAASC,KAAI,SAAAC,GAEvC,OADAA,EAAEL,MAAQ,EACHK,KAET,EAAKK,SAAS,CAAEP,c,EAGlBQ,gBAAkB,SAAAf,GAChB,IAAMO,EAAQ,YAAO,EAAKK,MAAML,UAC1BS,EAAIT,EAASU,QAAQjB,GAC3BO,EAASS,GAAT,eAAmBhB,KACjBO,EAASS,GAAGZ,MACd,EAAKU,SAAS,CAAEP,c,EAGlBW,aAAe,SAAAhB,GACb,IAAMK,EAAW,EAAKK,MAAML,SAASY,QAAO,SAAAV,GAAC,OAAIA,EAAEP,KAAOA,KAC1D,EAAKY,SAAS,CAAEP,c,uDAGhB,OACE,kBAAC,IAAMa,SAAP,KACE,kBAAC,EAAD,CAAQ3B,MAAOF,KAAKqB,MAAML,SAASY,QAAO,SAAAV,GAAC,OAAIA,EAAEL,MAAQ,KAAGiB,SAC5D,0BAAMhC,UAAU,aACd,kBAAC,EAAD,CAAUkB,SAAUhB,KAAKqB,MAAML,SAAUN,SAAUV,KAAK2B,aACtDnB,YAAaR,KAAKwB,gBAAiBT,QAASf,KAAKsB,oB,GApC3CnB,aCOE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3a07b176.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Navbar extends Component {\n  render() {\n    return (<nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand mb-0 h1\" href=\"#\">Navbar\n        <span className=\"badge badge-pill badge-secondary\">{this.props.total}</span>\n      </a>\n    </nav>);\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nclass Counter extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n\t\t\t\t<button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm\">Increment</button>\n\t\t\t\t<button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tgetBadgeClasses() {\n\t\tlet classes = \"badge m-2 badge-\";\n\t\tclasses += (this.props.counter.value === 0) ? 'warning' : 'primary';\n\t\treturn classes;\n\t}\n\n\tformatCount() {\n\t\tconst { value } = this.props.counter;\n\t\treturn value === 0 ? 'Zero' : value;\n\t}\n}\nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\nclass Counters extends Component {\n  render() {\n    const { onReset, onDelete, onIncrement, counters } = this.props;\n    return <div>\n      <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">Reset</button>\n      {counters.map(c =>\n        <Counter onIncrement={onIncrement} onDelete={onDelete} key={c.id} counter={c} />)}\n    </div>;\n  }\n}\n\nexport default Counters;","import React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters'\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  }\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const i = counters.indexOf(counter);\n    counters[i] = { ...counter };\n    ++counters[i].value;\n    this.setState({ counters });\n  }\n\n  handleDelete = id => {\n    const counters = this.state.counters.filter(c => c.id !== id);\n    this.setState({ counters });\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar total={this.state.counters.filter(c => c.value > 0).length} />\n        <main className='container'>\n          <Counters counters={this.state.counters} onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement} onReset={this.handleReset} />\n        </main>\n      </React.Fragment >\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}